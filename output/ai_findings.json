[
  {
    "category": "A01",
    "title": "Broken Access Control - Insecure Admin Check",
    "severity": "HIGH",
    "line_number": 43,
    "vulnerable_code": "if(c.getName().equals(\"admin\") && c.getValue().equals(\"1\"))",
    "explanation": "Authentication relies on easily manipulated cookie value. No proper session management or access control in place.",
    "fix": "Implement proper session-based authentication and role-based access control (RBAC)",
    "impact": "Attackers can gain admin access by modifying cookies",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ApiAction.java"
  },
  {
    "category": "A07",
    "title": "Weak Authentication Mechanism",
    "severity": "HIGH",
    "line_number": 42,
    "vulnerable_code": "for(Cookie c: getServletRequest().getCookies())",
    "explanation": "Using cookies without proper security attributes for authentication",
    "fix": "Use secure session management with HttpOnly, Secure flags and proper session tokens",
    "impact": "Cookie theft could lead to account takeover",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ApiAction.java"
  },
  {
    "category": "A04",
    "title": "Insecure Direct Object Reference",
    "severity": "MEDIUM",
    "line_number": 78,
    "vulnerable_code": "User user = userService.findByLogin(getLogin())",
    "explanation": "No validation of user access rights before retrieving user data",
    "fix": "Implement access control checks before returning user data",
    "impact": "Unauthorized access to user information",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ApiAction.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Logging",
    "severity": "MEDIUM",
    "line_number": 1,
    "vulnerable_code": "entire file",
    "explanation": "No logging of authentication attempts or admin actions",
    "fix": "Implement comprehensive logging for security-relevant events",
    "impact": "Inability to detect and investigate security incidents",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ApiAction.java"
  },
  {
    "category": "A01",
    "title": "Session Management Weakness",
    "severity": "MEDIUM",
    "line_number": 20,
    "vulnerable_code": "session = ActionContext.getContext().getSession()",
    "explanation": "Session management is not strictly enforced. No session timeout or rotation mechanisms visible.",
    "fix": "Implement session timeout, rotation and proper invalidation. Use secure session configuration.",
    "impact": "Could lead to session fixation or hijacking attacks",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/BaseController.java"
  },
  {
    "category": "A09",
    "title": "Inadequate Error Handling",
    "severity": "MEDIUM",
    "line_number": 94,
    "vulnerable_code": "e.printStackTrace()",
    "explanation": "Stack traces are printed directly to output which could leak sensitive information",
    "fix": "Use proper logging framework with appropriate log levels. Do not expose stack traces.",
    "impact": "Could reveal sensitive implementation details to attackers",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/BaseController.java"
  },
  {
    "category": "A04",
    "title": "Insecure Direct Response Writer",
    "severity": "LOW",
    "line_number": 92,
    "vulnerable_code": "ServletActionContext.getResponse().getWriter().write(txtMessage)",
    "explanation": "Direct writing of unvalidated content to response stream without content type validation",
    "fix": "Validate and sanitize content, set proper content type headers, consider using templating system",
    "impact": "Potential for XSS if unvalidated content is written to response",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/BaseController.java"
  },
  {
    "category": "A01",
    "title": "Potential Broken Access Control",
    "severity": "LOW",
    "line_number": 32,
    "vulnerable_code": "products = productService.findAll();",
    "explanation": "The assessment() method doesn't appear to check user authorization before returning all products. This could potentially expose product data to unauthorized users.",
    "fix": "Add authorization checks before returning product data: if(isUserAuthorized()) { products = productService.findAll(); }",
    "impact": "Unauthorized users might access product information they shouldn't see",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Home.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Logging",
    "severity": "LOW",
    "line_number": 1,
    "vulnerable_code": "entire class",
    "explanation": "No logging mechanisms are implemented for tracking access to product data or method execution",
    "fix": "Implement proper logging using a logging framework like Log4j2 or SLF4J to track method access and data retrieval",
    "impact": "Difficulty in detecting and investigating potential security incidents",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Home.java"
  },
  {
    "category": "A07",
    "title": "Weak Authentication Mechanism",
    "severity": "MEDIUM",
    "line_number": 46,
    "vulnerable_code": "if((user = userAuthenticationService.authenticate(getLogin(), getPassword())) != null)",
    "explanation": "No rate limiting or account lockout mechanisms visible in login logic, potentially allowing brute force attacks",
    "fix": "Implement account lockout after failed attempts and rate limiting",
    "impact": "Attackers can perform unlimited login attempts",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Login.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Login Attempt Logging",
    "severity": "MEDIUM",
    "line_number": 51,
    "vulnerable_code": "addActionError(\"Authentication failed!\");",
    "explanation": "Failed login attempts are not logged, making it difficult to detect attack attempts",
    "fix": "Add logging for both successful and failed authentication attempts with relevant details",
    "impact": "Security events cannot be properly monitored or audited",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Login.java"
  },
  {
    "category": "A02",
    "title": "Password Handling Risk",
    "severity": "MEDIUM",
    "line_number": 28,
    "vulnerable_code": "public String getPassword() { return password; }",
    "explanation": "Password is stored as plain String in memory rather than char[] which cannot be cleared from memory",
    "fix": "Use char[] instead of String for password storage and clear it after use",
    "impact": "Passwords may remain in memory and be exposed in memory dumps",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Login.java"
  },
  {
    "category": "A03",
    "title": "Command Injection Vulnerability",
    "severity": "CRITICAL",
    "line_number": 45,
    "vulnerable_code": "String[] command = { \"/bin/bash\", \"-c\", \"ping -t 5 -c 5 \" + getAddress() }",
    "explanation": "Direct string concatenation of user input into shell command creates command injection vulnerability. Attacker can inject arbitrary commands using shell metacharacters",
    "fix": "Validate input and use ProcessBuilder with proper input sanitization: new ProcessBuilder(\"ping\", \"-t\", \"5\", \"-c\", \"5\", address).start()",
    "impact": "Attacker can execute arbitrary system commands with application privileges",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/PingAction.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Error Logging",
    "severity": "MEDIUM",
    "line_number": 38,
    "vulnerable_code": "addActionMessage(\"Error running command: \" + e.getMessage())",
    "explanation": "Generic error message exposed to user and lack of proper error logging could hide attack attempts",
    "fix": "Implement proper logging: logger.error(\"Command execution error\", e) and return sanitized error to user",
    "impact": "Difficult to detect and investigate security incidents",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/PingAction.java"
  },
  {
    "category": "A01",
    "title": "Missing Access Control",
    "severity": "MEDIUM",
    "line_number": 89,
    "vulnerable_code": "productService.save(product)",
    "explanation": "No authorization checks before modifying product data",
    "fix": "Add role-based access control checks before product modifications",
    "impact": "Unauthorized users could modify product information",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ProductAction.java"
  },
  {
    "category": "A03",
    "title": "Potential SQL Injection",
    "severity": "MEDIUM",
    "line_number": 72,
    "vulnerable_code": "product = productService.find(Integer.parseInt(getProductId()))",
    "explanation": "Direct use of user input in database query without validation",
    "fix": "Add input validation and use parameterized queries in ProductService",
    "impact": "Could allow SQL injection if ProductService is not properly secured",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ProductAction.java"
  },
  {
    "category": "A04",
    "title": "Unsafe Integer Parsing",
    "severity": "LOW",
    "line_number": 72,
    "vulnerable_code": "Integer.parseInt(getProductId())",
    "explanation": "No exception handling for invalid integer input",
    "fix": "Add try-catch block for NumberFormatException",
    "impact": "Could cause application errors with invalid input",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ProductAction.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Error Logging",
    "severity": "LOW",
    "line_number": 93,
    "vulnerable_code": "addActionError(\"Error Occurred: \" + e.getMessage())",
    "explanation": "Generic error message exposed to user with potential sensitive info",
    "fix": "Implement proper error logging and show generic message to user",
    "impact": "Could expose sensitive system information in error messages",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ProductAction.java"
  },
  {
    "category": "A01",
    "title": "Open Redirect Vulnerability",
    "severity": "HIGH",
    "line_number": 18,
    "vulnerable_code": "if(!StringUtils.isEmpty(getUrl())) return \"redirect\";",
    "explanation": "The code performs a redirect based on a user-supplied URL parameter without any validation or sanitization. This allows attackers to redirect users to malicious sites.",
    "fix": "Implement URL validation and whitelist of allowed domains: if(isValidRedirectUrl(getUrl())) return \"redirect\";",
    "impact": "Attackers can perform phishing attacks by redirecting users to malicious sites while appearing to come from a trusted domain",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/RedirectAction.java"
  },
  {
    "category": "A07",
    "title": "Weak Password Validation",
    "severity": "MEDIUM",
    "line_number": 71,
    "vulnerable_code": "if(StringUtils.isEmpty(getPassword()))",
    "explanation": "No password complexity requirements are enforced. The validation only checks if password is empty.",
    "fix": "Implement password complexity requirements (length, special chars, numbers, etc)",
    "impact": "Weak passwords could be used, making accounts vulnerable to brute force attacks",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Register.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Error Handling",
    "severity": "MEDIUM",
    "line_number": 89,
    "vulnerable_code": "addActionError(\"Error Occurred: \" + e.getMessage())",
    "explanation": "Exposing raw exception messages to users could reveal sensitive implementation details",
    "fix": "Log the full exception internally but show generic error message to users",
    "impact": "Application internals could be exposed to attackers",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Register.java"
  },
  {
    "category": "A04",
    "title": "Missing Email Validation",
    "severity": "LOW",
    "line_number": 88,
    "vulnerable_code": "userRegistrationService.register(getName(), getLogin(), getEmail()",
    "explanation": "No validation is performed on email format before registration",
    "fix": "Add email format validation using regex or validation framework",
    "impact": "Invalid email addresses could be registered",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/Register.java"
  },
  {
    "category": "A07",
    "title": "Weak Password Reset Implementation",
    "severity": "HIGH",
    "line_number": 65,
    "vulnerable_code": "ret = userService.resetPasswordByLogin(getLogin(), getKey(), getPassword(), getPasswordConfirmation())",
    "explanation": "Password reset implementation lacks rate limiting and proper validation of reset tokens. No expiration time validation visible.",
    "fix": "Implement rate limiting, token expiration, and secure token validation. Use cryptographically secure tokens.",
    "impact": "Attackers could brute force reset tokens or perform mass password reset attempts",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ResetPassword.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Error Logging",
    "severity": "MEDIUM",
    "line_number": 69,
    "vulnerable_code": "addActionError(\"Exception ocurred: \" + e.getMessage())",
    "explanation": "Generic exception handling with direct message exposure. Lacks proper security logging of password reset attempts.",
    "fix": "Implement proper security logging, mask sensitive data, use unique identifiers for tracing errors without exposing internals",
    "impact": "Lack of audit trail for password reset attempts and potential information disclosure through error messages",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ResetPassword.java"
  },
  {
    "category": "A04",
    "title": "Insecure Password Reset Design",
    "severity": "MEDIUM",
    "line_number": 47,
    "vulnerable_code": "public String requestResetPassword()",
    "explanation": "The password reset flow lacks proper security controls. No verification of original password, email verification, or account lockout protection",
    "fix": "Implement multi-factor verification, require current password, add account lockout after failed attempts, send reset links to verified email",
    "impact": "Attackers could potentially take over accounts through password reset functionality",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/ResetPassword.java"
  },
  {
    "category": "A03",
    "title": "SQL Injection via Unsafe User Search",
    "severity": "HIGH",
    "line_number": 139,
    "vulnerable_code": "user = userService.findByLoginUnsafe(getLogin())",
    "explanation": "Method name 'findByLoginUnsafe' suggests unsafe SQL query execution with user input. Direct use of user-supplied login parameter in SQL query creates injection risk.",
    "fix": "Use parameterized queries with proper input validation and prepared statements",
    "impact": "Attackers can execute arbitrary SQL commands, potentially accessing or modifying sensitive data",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/UserAction.java"
  },
  {
    "category": "A07",
    "title": "Weak Password Validation",
    "severity": "MEDIUM",
    "line_number": 114,
    "vulnerable_code": "if(StringUtils.isEmpty(getPassword()) || StringUtils.isEmpty(getPasswordConfirmation()))",
    "explanation": "Password validation only checks for empty values, missing complexity requirements, length restrictions, and other security controls",
    "fix": "Implement strong password policy validation including length, complexity, and common password checks",
    "impact": "Weak passwords can be easily compromised through brute force attacks",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/UserAction.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Error Handling",
    "severity": "MEDIUM",
    "line_number": 146,
    "vulnerable_code": "addActionError(\"Error Occurred: \" + e.getMessage())",
    "explanation": "Detailed error messages are exposed to users, potentially revealing sensitive implementation details",
    "fix": "Log detailed errors server-side but return generic error messages to users",
    "impact": "Stack traces and system information could aid attackers in exploiting vulnerabilities",
    "file": "dvja/src/main/java/com/appsecco/dvja/controllers/UserAction.java"
  },
  {
    "category": "A01",
    "title": "Insufficient Session Validation",
    "severity": "HIGH",
    "line_number": 16,
    "vulnerable_code": "if(session.get(Constant.SESSION_USER_HANDLE) != null)",
    "explanation": "The interceptor only checks if the session handle exists but does not validate the session token's integrity or expiration. This could allow session fixation or hijacking attacks.",
    "fix": "Implement proper session validation including token integrity checks, expiration validation, and session binding to client attributes",
    "impact": "Attackers could potentially bypass authentication by manipulating session tokens",
    "file": "dvja/src/main/java/com/appsecco/dvja/interceptors/AuthenticationInterceptor.java"
  },
  {
    "category": "A07",
    "title": "Basic Authentication Mechanism",
    "severity": "MEDIUM",
    "line_number": 15,
    "vulnerable_code": "Map<String, Object> session = actionInvocation.getInvocationContext().getSession();",
    "explanation": "The authentication mechanism is overly simple, relying only on session presence. No additional security controls like IP binding, user agent validation, or session timeout are implemented.",
    "fix": "Implement multi-factor session validation, add session timeout, and bind sessions to client characteristics",
    "impact": "Increased risk of session-based attacks and unauthorized access",
    "file": "dvja/src/main/java/com/appsecco/dvja/interceptors/AuthenticationInterceptor.java"
  },
  {
    "category": "A04",
    "title": "Potential Field Validation Issues",
    "severity": "LOW",
    "line_number": 15,
    "vulnerable_code": "@Column(nullable = false) private String name;",
    "explanation": "While JPA annotations enforce database-level constraints, there is no explicit input validation or sanitization on fields like name, description, code, and tags. This could potentially allow oversized or malformed input.",
    "fix": "Add @Size, @Pattern and other Bean Validation annotations to validate input fields. For example: @Size(min=1, max=255) @Pattern(regexp=\"[A-Za-z0-9 ]+\")",
    "impact": "Could potentially allow storage of invalid or malicious data if not properly validated at the application layer",
    "file": "dvja/src/main/java/com/appsecco/dvja/models/Product.java"
  },
  {
    "category": "A02",
    "title": "Password Storage Without Hashing",
    "severity": "HIGH",
    "line_number": 26,
    "vulnerable_code": "private String password;",
    "explanation": "Password is stored as plain text String without any hashing mechanism, making it vulnerable to data breaches",
    "fix": "Store passwords using strong cryptographic hashing like BCrypt: @Column(nullable = false) private String hashedPassword;",
    "impact": "If database is compromised, all user passwords are exposed in plaintext",
    "file": "dvja/src/main/java/com/appsecco/dvja/models/User.java"
  },
  {
    "category": "A07",
    "title": "Weak Role-Based Access Control",
    "severity": "MEDIUM",
    "line_number": 84,
    "vulnerable_code": "return StringUtils.equals(getRole(), \"admin\");",
    "explanation": "Simple string comparison for admin role check is fragile and could be bypassed if role value is manipulated",
    "fix": "Use enum or constants for roles and implement proper role-based access control with authentication checks",
    "impact": "Potential privilege escalation if role values are not properly validated",
    "file": "dvja/src/main/java/com/appsecco/dvja/models/User.java"
  },
  {
    "category": "A03",
    "title": "SQL Injection in findContainingName()",
    "severity": "HIGH",
    "line_number": 51,
    "vulnerable_code": "createQuery(\"SELECT p FROM Product p WHERE p.name LIKE '%\" + name + \"%'\")",
    "explanation": "Direct string concatenation in JPQL/HQL query creates SQL injection vulnerability. User input is not sanitized before being used in query.",
    "fix": "Use parameterized queries: createQuery(\"SELECT p FROM Product p WHERE p.name LIKE :name\").setParameter(\"name\", '%' + name + '%')",
    "impact": "Attackers can execute arbitrary SQL commands, potentially accessing or modifying sensitive data",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/ProductService.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Logging of Data Access",
    "severity": "MEDIUM",
    "line_number": 32,
    "vulnerable_code": "logger.debug(\"Saving product with name: \" + product.getName())",
    "explanation": "Logging is only at DEBUG level and doesn't track important data modifications. No logging for read operations or failed attempts.",
    "fix": "Implement comprehensive logging at appropriate levels (INFO for data changes, WARN for potential security issues) with relevant context and audit trail",
    "impact": "Difficult to detect and investigate security incidents or unauthorized data access",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/ProductService.java"
  },
  {
    "category": "A07",
    "title": "Basic Authentication Implementation",
    "severity": "LOW",
    "line_number": 19,
    "vulnerable_code": "public User authenticate(String login, String password)",
    "explanation": "While not immediately vulnerable, the authentication implementation is basic and could be improved. No rate limiting or account lockout mechanisms are visible. The null return on failed authentication could be used for user enumeration.",
    "fix": "Implement rate limiting, account lockout, and consistent response timing. Consider using a standardized authentication framework.",
    "impact": "Potential for brute force attacks and user enumeration",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserAuthenticationService.java"
  },
  {
    "category": "A02",
    "title": "Plain Text Password Storage",
    "severity": "HIGH",
    "line_number": 30,
    "vulnerable_code": "user.setPassword(password)",
    "explanation": "Password is stored without hashing or encryption, exposing raw credentials in database",
    "fix": "Hash password using strong algorithm like BCrypt: user.setPassword(BCrypt.hashpw(password, BCrypt.gensalt()))",
    "impact": "Compromised database exposes all user passwords",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserRegistrationService.java"
  },
  {
    "category": "A07",
    "title": "Weak Password Validation",
    "severity": "MEDIUM",
    "line_number": 24,
    "vulnerable_code": "if(password == null) return null;",
    "explanation": "No password complexity requirements or length validation",
    "fix": "Add password policy validation (length, complexity, etc)",
    "impact": "Users can create weak passwords easily guessed or brute forced",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserRegistrationService.java"
  },
  {
    "category": "A04",
    "title": "No Input Validation",
    "severity": "MEDIUM",
    "line_number": 28,
    "vulnerable_code": "user.setName(name); user.setLogin(login); user.setEmail(email);",
    "explanation": "No validation on user input fields for length, format or content",
    "fix": "Add input validation for all fields: length limits, format checking, character restrictions",
    "impact": "Malicious data could be stored or cause application issues",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserRegistrationService.java"
  },
  {
    "category": "A03",
    "title": "SQL Injection in findByLoginUnsafe",
    "severity": "HIGH",
    "line_number": 75,
    "vulnerable_code": "entityManager.createQuery(\"SELECT u FROM User u WHERE u.login = '\" + login + \"'\")",
    "explanation": "Direct string concatenation in HQL/JPQL query creates injection vulnerability",
    "fix": "Use parameterized queries with setParameter() as implemented in findByLogin()",
    "impact": "Attackers can manipulate the query to access unauthorized data or modify database",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserService.java"
  },
  {
    "category": "A02",
    "title": "Weak Password Hashing",
    "severity": "HIGH",
    "line_number": 108,
    "vulnerable_code": "DigestUtils.md5DigestAsHex(password.getBytes())",
    "explanation": "MD5 is cryptographically broken and unsuitable for password hashing",
    "fix": "Use strong adaptive hashing like BCrypt or Argon2 with proper salting",
    "impact": "Compromised passwords can be quickly cracked using rainbow tables",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserService.java"
  },
  {
    "category": "A09",
    "title": "Sensitive Data Exposure in Logs",
    "severity": "MEDIUM",
    "line_number": 93,
    "vulnerable_code": "logger.info(\"Changing password for login: \" + login + \" New password: \" + password)",
    "explanation": "Logging sensitive data like passwords in plaintext",
    "fix": "Remove password from log message or mask it",
    "impact": "Passwords could be exposed through log files",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserService.java"
  },
  {
    "category": "A07",
    "title": "Weak Password Reset Implementation",
    "severity": "MEDIUM",
    "line_number": 91,
    "vulnerable_code": "DigestUtils.md5DigestAsHex(login.getBytes())",
    "explanation": "Password reset token generated using weak MD5 hash of username",
    "fix": "Use secure random token generation with proper expiration",
    "impact": "Password reset tokens could be predicted or brute-forced",
    "file": "dvja/src/main/java/com/appsecco/dvja/services/UserService.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Logging",
    "severity": "LOW",
    "line_number": 63,
    "vulnerable_code": "public void setMessage(String message) { this.message = message; }",
    "explanation": "No logging of message modifications which could hinder security monitoring and auditing",
    "fix": "Add appropriate logging: logger.info(\"Message updated to: {}\", message);",
    "impact": "Reduced ability to detect and investigate potential security incidents",
    "file": "dvja/src/main/java/com/appsecco/example/HelloWorld.java"
  },
  {
    "category": "A07",
    "title": "Weak Authentication Implementation",
    "severity": "HIGH",
    "line_number": 15,
    "vulnerable_code": "public String execute() throws Exception { ... }",
    "explanation": "Login implementation only checks for empty/null values without proper authentication logic or password hashing",
    "fix": "Implement proper authentication with password hashing, account lockout, and secure session management",
    "impact": "Attackers can bypass authentication or brute force passwords",
    "file": "dvja/src/main/java/com/appsecco/example/Login.java"
  },
  {
    "category": "A09",
    "title": "Insufficient Logging",
    "severity": "MEDIUM",
    "line_number": 15,
    "vulnerable_code": "public String execute() throws Exception",
    "explanation": "No logging of authentication attempts, successful or failed logins",
    "fix": "Add comprehensive logging for all authentication events with appropriate log levels",
    "impact": "Security events cannot be monitored or audited",
    "file": "dvja/src/main/java/com/appsecco/example/Login.java"
  },
  {
    "category": "A02",
    "title": "Plain Text Password Storage",
    "severity": "HIGH",
    "line_number": 44,
    "vulnerable_code": "private String password;",
    "explanation": "Password is stored as plain text in memory and potentially in database",
    "fix": "Use secure password hashing (e.g., bcrypt) and never store plain text passwords",
    "impact": "Passwords can be exposed if memory is dumped or database is compromised",
    "file": "dvja/src/main/java/com/appsecco/example/Login.java"
  },
  {
    "category": "A06",
    "title": "Outdated JavaScript Library",
    "severity": "LOW",
    "line_number": 1,
    "vulnerable_code": "/*! showdown 02-06-2017 */",
    "explanation": "Using an older version of the Showdown markdown library from 2017. Older versions may contain known vulnerabilities.",
    "fix": "Update to the latest version of Showdown from https://github.com/showdownjs/showdown",
    "impact": "Potential security issues from using outdated library version",
    "file": "dvja/src/main/webapp/assets/showdown.min.js"
  },
  {
    "category": "A05",
    "title": "Meta Refresh Security Configuration",
    "severity": "LOW",
    "line_number": 4,
    "vulnerable_code": "<META HTTP-EQUIV=\"Refresh\" CONTENT=\"0;URL=Login.action\">",
    "explanation": "Using meta refresh for redirection is considered a less secure method compared to server-side redirects. It can potentially be used in phishing attacks if the page is compromised.",
    "fix": "Use server-side redirect mechanisms or JavaScript window.location instead of meta refresh",
    "impact": "Could potentially be exploited in phishing attacks if the page is compromised, though risk is minimal",
    "file": "dvja/src/main/webapp/index.html"
  }
]